#!/bin/bash

# Deprovisioning is the inverse of provisioning, except that
# current GUI deprovisioning flow in ProvisioningServlet.doDelete
# is to only revoke the safe/consumers role from the host identity.

source ./cybrtest.config

export CURL="curl -s"
export BASE_URL=http://localhost:8080/cybr
export DEBUG=true

main() {
  # Login as admin to Conjur
  ConjurAuthnCreds=$(echo "$CONJUR_ADMIN_NAME:$CONJUR_ADMIN_PASSWORD" | base64)
  conjurAuthnResponse=$($CURL -H "Authorization: Basic $ConjurAuthnCreds" -H "Content-Type: application/json" "$BASE_URL/conjur/login")
  test "conjurlogin" "$conjurAuthnResponse"

  # Revoke role from Conjur identity
  authnResponse=$($CURL --request DELETE --url "$BASE_URL/conjur/accesspolicy?projectName=$PROJECT_NAME&identityName=$PROJECT_IDENTITY&groupRoleName=$PROJECT_GROUP_ROLE")
  test "revokeAccessgrant" "$authnResponse"

# It turns out that it's difficult to determine when to delete identities,
# roles or safes. They may have other members, or may be needed later.
# So we stop here. But the servlet endpoints called below are implemented,
# should they be needed later.

exit

  # Delete Conjur identity
  authnResponse=$($CURL --request DELETE --url "$BASE_URL/conjur/identitypolicy?projectName=$PROJECT_NAME&identityName=$PROJECT_IDENTITY")
  test "deleteConjuridentity" "$authnResponse"

  # Delete Conjur safe policy for project
  authnResponse=$($CURL --request DELETE --url "$BASE_URL/conjur/safepolicy?projectName=$PROJECT_NAME&vaultName=$PAS_VAULT_NAME&lobName=$PAS_LOB_NAME&safeName=$PAS_SAFE_NAME")
  test "deleteConjurSafePolicy" "$authnResponse"

  # Delete Conjur base policy for project
  authnResponse=$($CURL --request DELETE --url "$BASE_URL/conjur/basepolicy?projectName=$PROJECT_NAME&adminName=$PROJECT_ADMIN")
  test "deleteConjurBasePolicy" "$authnResponse"

  # Delete accounts from safe named in access request
  accountList=$($CURL --url "$BASE_URL/pas/accounts?safeName=$PAS_SAFE_NAME")
  test "listAccounts" "$accountList"

  i=0
  while true; do
    acctId=$(echo $accountList | jq -r .value[$i].id)
    if [[ $acctId != null ]]; then
      accountDelete=$($CURL -X DELETE --url "$BASE_URL/pas/accounts?accountId=$acctId")
      test "deleteAccount" "$accountDelete"
    else
      break
    fi
    let i=$i+1
  done

  # Delete safe named in access request
  safeDelete=$($CURL -X DELETE --url "$BASE_URL/pas/safes?safeName=$PAS_SAFE_NAME&lobName=$PAS_LOB_NAME&vaultName=$PAS_VAULT_NAME")
  test "deleteSafe" "$safeDelete"
}

###################################
test() {
  if ! $DEBUG; then return; fi
  local funcname=$1; shift
  local value="$(echo $1 | tr -d '\r\n')"; shift

  if [[ $value == null ]]; then
    echo "$funcname returned null."
  else
    echo "$funcname returned:"
    echo "$value"
    echo
  fi
}

main "$@"
